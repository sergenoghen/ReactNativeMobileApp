{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { throwError } from 'rxjs';\nimport { catchError, mergeMap, retry } from 'rxjs/operators';\nimport { environment } from \"../../environnement/environnement\";\nimport { RxJSHttpClient } from 'rxjs-http-client';\nvar RequestService = function () {\n  function RequestService() {\n    _classCallCheck(this, RequestService);\n    this._RxJSHttpClient = new RxJSHttpClient();\n    this._XMLHttpRequest = new XMLHttpRequest();\n  }\n  _createClass(RequestService, [{\n    key: \"getMoviesFromApi\",\n    value: function () {\n      var _getMoviesFromApi = _asyncToGenerator(function* () {\n        var moviesData = [];\n        var erreur = null;\n        try {\n          var response = yield fetch(\"https://reactnative.dev/movies.json\", {\n            headers: {\n              Authorization: \"token \" + environment.apiKey\n            }\n          });\n          var json = yield response.json();\n          var jsonData = json.data ? json.data : json;\n          return moviesData = jsonData;\n        } catch (error) {\n          retry(3);\n          console.log('An error occured !');\n          console.error(error);\n          erreur = error;\n        }\n        return new Promise(function (resolve, reject) {\n          resolve(moviesData);\n          reject(erreur);\n        });\n      });\n      function getMoviesFromApi() {\n        return _getMoviesFromApi.apply(this, arguments);\n      }\n      return getMoviesFromApi;\n    }()\n  }, {\n    key: \"getCustomerDetails\",\n    value: function () {\n      var _getCustomerDetails = _asyncToGenerator(function* () {\n        var _this = this;\n        var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n        return yield fetch(environment.apiUrl + \"customer?page=1\").then(function (data) {\n          if (data) return data;\n          retry(3), catchError(_this.handleError);\n        });\n      });\n      function getCustomerDetails() {\n        return _getCustomerDetails.apply(this, arguments);\n      }\n      return getCustomerDetails;\n    }()\n  }, {\n    key: \"handleError\",\n    value: function handleError(error) {\n      if (error.status === 0) {\n        console.error('An error occurred:', error);\n      } else {\n        console.error(\"Backend returned code \" + error.status + \", body was: \", error);\n      }\n      return throwError(function () {\n        return new Error('Something bad happened; please try again later.');\n      });\n    }\n  }, {\n    key: \"sendXMLHttpRequest\",\n    value: function sendXMLHttpRequest() {\n      var _this2 = this;\n      this._XMLHttpRequest.onreadystatechange = function (e) {\n        if (_this2._XMLHttpRequest.readyState !== 4) {\n          return;\n        }\n        if (_this2._XMLHttpRequest.status === 200) {\n          console.log('success', _this2._XMLHttpRequest.responseText);\n        } else {\n          console.warn('error');\n        }\n      };\n      this._XMLHttpRequest.open('GET', 'https://reactnative.dev/movies.json');\n      this._XMLHttpRequest.send();\n    }\n  }, {\n    key: \"getRequest\",\n    value: function getRequest() {\n      this._RxJSHttpClient.get('some-url').pipe(mergeMap(function (response) {\n        return response.json();\n      })).subscribe(function (response) {\n        console.log(response);\n      });\n    }\n  }, {\n    key: \"postRequest\",\n    value: function postRequest() {\n      var request = {\n        body: {\n          some: 'data'\n        }\n      };\n      this._RxJSHttpClient.post('some-url', request).pipe(mergeMap(function (response) {\n        return response.json();\n      })).subscribe(function (response) {\n        console.log(response);\n      });\n    }\n  }]);\n  return RequestService;\n}();\nexport default RequestService;","map":{"version":3,"names":["throwError","catchError","mergeMap","retry","environment","RxJSHttpClient","RequestService","_classCallCheck","_RxJSHttpClient","_XMLHttpRequest","XMLHttpRequest","_createClass","key","value","_getMoviesFromApi","_asyncToGenerator","moviesData","erreur","response","fetch","headers","Authorization","apiKey","json","jsonData","data","error","console","log","Promise","resolve","reject","getMoviesFromApi","apply","arguments","_getCustomerDetails","_this","id","length","undefined","apiUrl","then","handleError","getCustomerDetails","status","Error","sendXMLHttpRequest","_this2","onreadystatechange","e","readyState","responseText","warn","open","send","getRequest","get","pipe","subscribe","postRequest","request","body","some","post"],"sources":["C:/applicationJS/react-apps/ReactNativeMobileApp/src/typeScript/Api/ApiRequest.tsx"],"sourcesContent":[" //https://www.npmjs.com/package/rxjs-http-client?activeTab=readme\r\n \r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError, map, mergeMap, retry } from 'rxjs/operators';\r\nimport { environment } from '../../environnement/environnement';\r\nimport { Movie} from '../../model/Movie';\r\nimport { Customer} from '../../model/Customer';\r\nimport { HttpResponse, RxJSHttpClient } from 'rxjs-http-client';\r\n\r\n\r\n  class RequestService{\r\n    _RxJSHttpClient: RxJSHttpClient;\r\n    _XMLHttpRequest: XMLHttpRequest;\r\n\r\n    async getMoviesFromApi() {\r\n        let moviesData: any[]=[];\r\n        let erreur: any = null;\r\n        try {\r\n            const response = await fetch(\r\n                // environment.apiUrl+\"customer?page=1\",\r\n               \"https://reactnative.dev/movies.json\",\r\n               {\r\n                    headers: {\r\n                        Authorization: `token ${environment.apiKey}`,\r\n                    },\r\n                });\r\n            const json = await response.json();\r\n            const jsonData:any[] = json.data?json.data:json;\r\n            return  moviesData = jsonData;\r\n            \r\n        } catch (error) {     \r\n            retry(3)\r\n            console.log('An error occured !');       \r\n            console.error(error);\r\n            erreur = error;\r\n        }\r\n\r\n        return new Promise<any>((resolve, reject)=>{\r\n            resolve(moviesData);\r\n            reject(erreur);\r\n        });\r\n\r\n    };\r\n\r\n\r\n    \r\n   async getCustomerDetails(id:any=1) { //Not in use\r\n    \r\n    return await fetch( environment.apiUrl+\"customer?page=1\")\r\n      .then(data=>{\r\n        if(data) return data\r\n        retry(3), // retry a failed request up to 3 times\r\n        catchError(this.handleError) // then handle the error\r\n      }\r\n        \r\n      );\r\n  }\r\n\r\n    \r\n  private handleError(error: HttpResponse) {// Not in use\r\n    /**/if (error.status === 0) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error);\r\n    } else {\r\n      // The backend returned an unsuccessful response code.\r\n      // The response body may contain clues as to what went wrong.\r\n      console.error(\r\n        `Backend returned code ${error.status}, body was: `, error);\r\n    }\r\n    // Return an observable with a user-facing error message.\r\n    return throwError(() => new Error('Something bad happened; please try again later.'));\r\n  }\r\n\r\n\r\n\r\n\r\n    sendXMLHttpRequest(){\r\n        \r\n        this._XMLHttpRequest.onreadystatechange = e => {\r\n            if ( this._XMLHttpRequest.readyState !== 4) {\r\n                return;\r\n            }\r\n\r\n            if ( this._XMLHttpRequest.status === 200) {\r\n                console.log('success',  this._XMLHttpRequest.responseText);\r\n            } else {\r\n                console.warn('error');\r\n            }\r\n        };\r\n\r\n        this._XMLHttpRequest.open('GET', 'https://reactnative.dev/movies.json');\r\n        this._XMLHttpRequest.send();\r\n    }\r\n\r\n     \r\n    getRequest() {\r\n       this._RxJSHttpClient.get('some-url')\r\n            .pipe(\r\n                mergeMap((response) => response.json())\r\n            )\r\n            .subscribe((response) => {\r\n                console.log(response)\r\n            })\r\n    }\r\n\r\n    postRequest() {\r\n        const request = {\r\n            body: {\r\n                some: 'data'\r\n            }\r\n        }\r\n        \r\n        this._RxJSHttpClient.post('some-url', request)\r\n            .pipe(\r\n                mergeMap((response) => response.json())\r\n            )\r\n            .subscribe((response) => {\r\n                console.log(response)\r\n            })\r\n    }\r\n\r\n\r\n    constructor(){\r\n        this._RxJSHttpClient = new RxJSHttpClient();\r\n        this._XMLHttpRequest = new XMLHttpRequest();\r\n    }\r\n }\r\n \r\n export default RequestService;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}