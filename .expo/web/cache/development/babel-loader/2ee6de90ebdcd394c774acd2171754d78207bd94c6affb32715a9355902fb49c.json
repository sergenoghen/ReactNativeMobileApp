{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = getNativePropsForTNode;\nvar _react = _interopRequireDefault(require(\"react\"));\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nvar empty = {};\nfunction getNativePropsForTNode(props) {\n  var _tnode$getReactNative, _ref;\n  var tnode = props.tnode,\n    style = props.style,\n    type = props.type,\n    passedNativeProps = props.nativeProps,\n    onPress = props.onPress,\n    overridenChildren = props.children,\n    propsForChildren = props.propsForChildren,\n    viewProps = props.viewProps,\n    textProps = props.textProps,\n    TNodeChildrenRenderer = props.TNodeChildrenRenderer;\n  var children = overridenChildren || (tnode.type === 'text' ? tnode.data : _react.default.createElement(TNodeChildrenRenderer, {\n    tnode: tnode,\n    propsForChildren: propsForChildren\n  }));\n  var switchProp = type === 'block' ? viewProps : textProps;\n  var propsFromModel = ((_tnode$getReactNative = tnode.getReactNativeProps()) === null || _tnode$getReactNative === void 0 ? void 0 : _tnode$getReactNative[type === 'block' ? 'view' : 'text']) || empty;\n  var syntheticOnPress = (_ref = onPress !== null && onPress !== void 0 ? onPress : passedNativeProps === null || passedNativeProps === void 0 ? void 0 : passedNativeProps.onPress) !== null && _ref !== void 0 ? _ref : propsFromModel.onPress;\n  var nativeProps = _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, typeof syntheticOnPress === 'function' ? {\n    accessibilityRole: type === 'block' ? 'button' : 'link'\n  } : null), propsFromModel), passedNativeProps), switchProp), {}, {\n    children: children,\n    onPress: syntheticOnPress,\n    style: [style, passedNativeProps === null || passedNativeProps === void 0 ? void 0 : passedNativeProps.style, switchProp.style],\n    testID: tnode.tagName || undefined\n  });\n  return nativeProps;\n}","map":{"version":3,"names":["_react","_interopRequireDefault","require","empty","getNativePropsForTNode","props","_tnode$getReactNative","_ref","tnode","style","type","passedNativeProps","nativeProps","onPress","overridenChildren","children","propsForChildren","viewProps","textProps","TNodeChildrenRenderer","data","default","createElement","switchProp","propsFromModel","getReactNativeProps","syntheticOnPress","_objectSpread","accessibilityRole","testID","tagName","undefined"],"sources":["C:\\applicationJS\\react-apps\\ReactNativeMobileApp\\node_modules\\react-native-render-html\\lib\\commonjs\\helpers\\getNativePropsForTNode.ts"],"sourcesContent":["import { TBlock, TPhrasing, TText } from '@native-html/transient-render-engine';\nimport React from 'react';\nimport { TextProps, ViewProps } from 'react-native';\nimport { TDefaultRendererProps } from '../shared-types';\n\nconst empty: any = {};\n\n/**\n * Extract React Native props for a given {@link TNode}, such as those which\n * would be passed to `Text`, `View` or `GenericPressable` by `TDefaultRenderer`.\n *\n * This helper function is peculiarly useful when one wants a custom renderer\n * which uses a different native component, for example `Animated.Text` instead\n * of default `Text`.\n *\n * @public\n *\n * @example\n *\n * ```tsx\n * import React from 'react';\n * import { Animated } from 'react-native';\n * import { CustomTextualRenderer, getNativePropsForTNode } from 'react-native-render-html';\n *\n * const AnimatedSpanRenderer: CustomTextualRenderer = (props) => {\n *   const nativeProps = getNativePropsForTNode(props);\n *   // This is equivalent to a TDefaultRenderer which `Text` is replaced\n *   // with Animated.Text\n *   return <Animated.Text {...nativeProps} />;\n * }\n * ```\n */\nexport default function getNativePropsForTNode<\n  T extends TPhrasing | TText | TBlock\n>(\n  props: TDefaultRendererProps<T>\n): T extends TBlock ? ViewProps & { onPress?: () => void } : TextProps {\n  const {\n    tnode,\n    style,\n    type,\n    nativeProps: passedNativeProps,\n    onPress,\n    children: overridenChildren,\n    propsForChildren,\n    viewProps,\n    textProps,\n    TNodeChildrenRenderer\n  } = props;\n  const children =\n    overridenChildren ||\n    (tnode.type === 'text'\n      ? (tnode as TText).data\n      : React.createElement(TNodeChildrenRenderer, {\n          tnode,\n          propsForChildren\n        }));\n  const switchProp = type === 'block' ? viewProps : textProps;\n  const propsFromModel =\n    tnode.getReactNativeProps()?.[type === 'block' ? 'view' : 'text'] || empty;\n  const syntheticOnPress =\n    onPress ?? passedNativeProps?.onPress ?? propsFromModel.onPress;\n  const nativeProps: TextProps | ViewProps = {\n    ...(typeof syntheticOnPress === 'function'\n      ? ({ accessibilityRole: type === 'block' ? 'button' : 'link' } as const)\n      : null),\n    ...propsFromModel,\n    ...passedNativeProps,\n    ...switchProp,\n    children,\n    onPress: syntheticOnPress,\n    style: [style, passedNativeProps?.style, switchProp.style],\n    testID: tnode.tagName || undefined\n  };\n  return nativeProps as any;\n}\n"],"mappings":";;;;;;;;;AACA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;;;;;;AAIA,IAAMC,KAAU,GAAG,EAAnB;AA2Be,SAASC,sBAATA,CAGbC,KAHa,EAIwD;EAAA,IAAAC,qBAAA,EAAAC,IAAA;EACrE,IACEC,KADI,GAWFH,KAXJ,CACEG,KADI;IAEJC,KAFI,GAWFJ,KAXJ,CAEEI,KAFI;IAGJC,IAHI,GAWFL,KAXJ,CAGEK,IAHI;IAISC,iBAJT,GAWFN,KAXJ,CAIEO,WAAW;IACXC,OALI,GAWFR,KAXJ,CAKEQ,OALI;IAMMC,iBANN,GAWFT,KAXJ,CAMEU,QAAQ;IACRC,gBAPI,GAWFX,KAXJ,CAOEW,gBAPI;IAQJC,SARI,GAWFZ,KAXJ,CAQEY,SARI;IASJC,SATI,GAWFb,KAXJ,CASEa,SATI;IAUJC,qBAAA,GACEd,KAXJ,CAUEc,qBAAA;EAEF,IAAMJ,QAAQ,GACZD,iBAAiB,KAChBN,KAAK,CAACE,IAAN,KAAe,MAAf,GACIF,KAAD,CAAiBY,IADpB,GAEGpB,MAAA,CAAAqB,OAAA,CAAMC,aAAN,CAAoBH,qBAApB,EAA2C;IACzCX,KADyC,EACzCA,KADyC;IAEzCQ,gBAAA,EAAAA;EAFyC,CAA3C,CAHa,CADnB;EAQA,IAAMO,UAAU,GAAGb,IAAI,KAAK,OAAT,GAAmBO,SAAnB,GAA+BC,SAAlD;EACA,IAAMM,cAAc,GAClB,EAAAlB,qBAAA,GAAAE,KAAK,CAACiB,mBAAN,gBAAAnB,qBAAA,uBAAAA,qBAAA,CAA8BI,IAAI,KAAK,OAAT,GAAmB,MAAnB,GAA4B,MAA1D,MAAqEP,KADvE;EAEA,IAAMuB,gBAAgB,IAAAnB,IAAA,GACpBM,OADoB,aACpBA,OADoB,cACpBA,OADoB,GACTF,iBADS,aACTA,iBADS,uBACTA,iBAAiB,CAAEE,OADV,cAAAN,IAAA,cAAAA,IAAA,GACqBiB,cAAc,CAACX,OAD1D;EAEA,IAAMD,WAAkC,GAAAe,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAAA,aAAA,KAClC,OAAOD,gBAAP,KAA4B,UAA5B,GACC;IAAEE,iBAAiB,EAAElB,IAAI,KAAK,OAAT,GAAmB,QAAnB,GAA8B;EAAnD,CADD,GAEA,IAFJ,GAGGc,cAJsC,GAKtCb,iBALsC,GAMtCY,UANsC;IAOzCR,QAPyC,EAOzCA,QAPyC;IAQzCF,OAAO,EAAEa,gBARgC;IASzCjB,KAAK,EAAE,CAACA,KAAD,EAAQE,iBAAR,aAAQA,iBAAR,uBAAQA,iBAAiB,CAAEF,KAA3B,EAAkCc,UAAU,CAACd,KAA7C,CATkC;IAUzCoB,MAAM,EAAErB,KAAK,CAACsB,OAAN,IAAiBC;EAAA,EAV3B;EAYA,OAAOnB,WAAP;AACD"},"metadata":{},"sourceType":"script","externalDependencies":[]}