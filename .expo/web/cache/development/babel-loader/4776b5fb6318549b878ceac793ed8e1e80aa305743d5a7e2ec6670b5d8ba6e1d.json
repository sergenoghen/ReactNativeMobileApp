{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutProperties = require(\"@babel/runtime/helpers/objectWithoutProperties\");\nvar _excluded = [\"style\", \"children\", \"borderless\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = GenericPressable;\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nvar _SharedPropsProvider = require(\"./context/SharedPropsProvider\");\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction GenericPressable(_ref) {\n  var style = _ref.style,\n    children = _ref.children,\n    _ref$borderless = _ref.borderless,\n    borderless = _ref$borderless === void 0 ? false : _ref$borderless,\n    otherProps = _objectWithoutProperties(_ref, _excluded);\n  var _ref2 = (0, _SharedPropsProvider.useSharedProps)(),\n    pressableHightlightColor = _ref2.pressableHightlightColor,\n    UserProvidedPressable = _ref2.GenericPressable;\n  if (UserProvidedPressable) {\n    return _react.default.createElement(UserProvidedPressable, _extends({\n      style: style,\n      borderless: borderless\n    }, otherProps), children);\n  }\n  if (_reactNative.Platform.OS === 'android') {\n    return _react.default.createElement(_reactNative.View, {\n      style: style\n    }, _react.default.createElement(_reactNative.TouchableNativeFeedback, _extends({\n      useForeground: true,\n      background: _reactNative.TouchableNativeFeedback.Ripple(pressableHightlightColor, borderless)\n    }, otherProps), _react.default.createElement(_reactNative.View, {\n      testID: \"generic-pressable\"\n    }, children)));\n  }\n  return _react.default.createElement(_reactNative.TouchableHighlight, _extends({\n    underlayColor: pressableHightlightColor,\n    style: style\n  }, otherProps), _react.default.createElement(_reactNative.View, {\n    testID: \"generic-pressable\"\n  }, children));\n}","map":{"version":3,"names":["_react","_interopRequireDefault","require","_reactNative","_SharedPropsProvider","GenericPressable","_ref","style","children","_ref$borderless","borderless","otherProps","_objectWithoutProperties","_excluded","_ref2","useSharedProps","pressableHightlightColor","UserProvidedPressable","default","createElement","_extends","Platform","OS","View","TouchableNativeFeedback","useForeground","background","Ripple","testID","TouchableHighlight","underlayColor"],"sources":["C:\\applicationJS\\react-apps\\ReactNativeMobileApp\\node_modules\\react-native-render-html\\lib\\commonjs\\GenericPressable.tsx"],"sourcesContent":["import React, { PropsWithChildren } from 'react';\nimport {\n  Platform,\n  TouchableHighlight,\n  TouchableNativeFeedback,\n  View\n} from 'react-native';\nimport { useSharedProps } from './context/SharedPropsProvider';\nimport { GenericPressableProps } from './shared-types';\n\nexport default function GenericPressable({\n  style,\n  children,\n  borderless = false,\n  ...otherProps\n}: PropsWithChildren<GenericPressableProps>) {\n  const { pressableHightlightColor, GenericPressable: UserProvidedPressable } =\n    useSharedProps();\n  if (UserProvidedPressable) {\n    return (\n      <UserProvidedPressable\n        style={style}\n        borderless={borderless}\n        {...(otherProps as any)}>\n        {children}\n      </UserProvidedPressable>\n    );\n  }\n  if (Platform.OS === 'android') {\n    // TouchableNativeFeedback does not support a\n    // style prop. So we must wrap it inside a View.\n    return (\n      <View style={style}>\n        <TouchableNativeFeedback\n          useForeground\n          background={TouchableNativeFeedback.Ripple(\n            pressableHightlightColor,\n            borderless\n          )}\n          {...(otherProps as any)}>\n          <View testID=\"generic-pressable\">{children}</View>\n        </TouchableNativeFeedback>\n      </View>\n    );\n  }\n  return (\n    <TouchableHighlight\n      underlayColor={pressableHightlightColor}\n      style={style}\n      {...(otherProps as any)}>\n      <View testID=\"generic-pressable\">{children}</View>\n    </TouchableHighlight>\n  );\n}\n"],"mappings":";;;;;;;;AAAA,IAAAA,MAAA,GAAAC,sBAAA,CAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAD,OAAA;AAOA,IAAAE,oBAAA,GAAAF,OAAA;;;;;;;;;;;;;;;;;;;;AAGe,SAASG,gBAATA,CAAAC,IAAA,EAK8B;EAAA,IAJ3CC,KADuC,GAAAD,IAAA,CACvCC,KADuC;IAEvCC,QAFuC,GAAAF,IAAA,CAEvCE,QAFuC;IAAAC,eAAA,GAAAH,IAAA,CAGvCI,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,KAH0B,GAAAA,eAAA;IAIpCE,UAAA,GAAAC,wBAAA,CAAAN,IAAA,EAAAO,SAAA;EAEH,IAAAC,KAAA,GACE,IAAAV,oBAAA,CAAAW,cAAA,GADF;IAAQC,wBAAF,GAAAF,KAAA,CAAEE,wBAAF;IAA8CC,qBAAA,GAAAH,KAAA,CAAlBT,gBAAgB;EAElD,IAAIY,qBAAJ,EAA2B;IACzB,OACEjB,MAAA,CAAAkB,OAAA,CAAAC,aAAA,CAACF,qBAAD,EAAAG,QAAA;MACEb,KAAK,EAAEA,KADT;MAEEG,UAAU,EAAEA;IAFd,GAGOC,UAHP,GAIGH,QAJH,CADF;EAQD;EACD,IAAIL,YAAA,CAAAkB,QAAA,CAASC,EAAT,KAAgB,SAApB,EAA+B;IAG7B,OACEtB,MAAA,CAAAkB,OAAA,CAAAC,aAAA,CAAChB,YAAA,CAAAoB,IAAD;MAAMhB,KAAK,EAAEA;IAAb,GACEP,MAAA,CAAAkB,OAAA,CAAAC,aAAA,CAAChB,YAAA,CAAAqB,uBAAD,EAAAJ,QAAA;MACEK,aAAa,MADf;MAEEC,UAAU,EAAEvB,YAAA,CAAAqB,uBAAA,CAAwBG,MAAxB,CACVX,wBADU,EAEVN,UAFU;IAFd,GAMOC,UANP,GAOEX,MAAA,CAAAkB,OAAA,CAAAC,aAAA,CAAChB,YAAA,CAAAoB,IAAD;MAAMK,MAAM,EAAC;IAAb,GAAkCpB,QAAlC,CAPF,CADF,CADF;EAaD;EACD,OACER,MAAA,CAAAkB,OAAA,CAAAC,aAAA,CAAChB,YAAA,CAAA0B,kBAAD,EAAAT,QAAA;IACEU,aAAa,EAAEd,wBADjB;IAEET,KAAK,EAAEA;EAFT,GAGOI,UAHP,GAIEX,MAAA,CAAAkB,OAAA,CAAAC,aAAA,CAAChB,YAAA,CAAAoB,IAAD;IAAMK,MAAM,EAAC;EAAb,GAAkCpB,QAAlC,CAJF,CADF;AAQD"},"metadata":{},"sourceType":"script","externalDependencies":[]}