{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nvar _stateToPropMappings;\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar _UIManager$getViewMan, _UIManager$getViewMan2, _UIManager$getConstan;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport findNodeHandleRN from \"react-native-web/dist/exports/findNodeHandle\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Touchable from \"react-native-web/dist/exports/Touchable\";\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from \"../RNGestureHandlerModule\";\nimport { State } from \"../State\";\nfunction findNodeHandle(node) {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\nvar _NativeModules$UIMana = NativeModules.UIManager,\n  UIManager = _NativeModules$UIMana === void 0 ? {} : _NativeModules$UIMana;\nvar customGHEventsConfig = {\n  onGestureHandlerEvent: {\n    registrationName: 'onGestureHandlerEvent'\n  },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange'\n  }\n};\nUIManager.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManager.genericDirectEventTypes), customGHEventsConfig);\nvar UIManagerConstants = (_UIManager$getViewMan = (_UIManager$getViewMan2 = UIManager.getViewManagerConfig) === null || _UIManager$getViewMan2 === void 0 ? void 0 : _UIManager$getViewMan2.call(UIManager, 'getConstants')) !== null && _UIManager$getViewMan !== void 0 ? _UIManager$getViewMan : (_UIManager$getConstan = UIManager.getConstants) === null || _UIManager$getConstan === void 0 ? void 0 : _UIManager$getConstan.call(UIManager);\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = _objectSpread(_objectSpread({}, UIManagerConstants.genericDirectEventTypes), customGHEventsConfig);\n}\nvar _UIManager$setJSRespo = UIManager.setJSResponder,\n  oldSetJSResponder = _UIManager$setJSRespo === void 0 ? function () {} : _UIManager$setJSRespo,\n  _UIManager$clearJSRes = UIManager.clearJSResponder,\n  oldClearJSResponder = _UIManager$clearJSRes === void 0 ? function () {} : _UIManager$clearJSRes;\nUIManager.setJSResponder = function (tag, blockNativeResponder) {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = function () {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\nvar handlerTag = 1;\nvar handlerIDToTag = {};\nfunction isConfigParam(param, name) {\n  return param !== undefined && (param !== Object(param) || !('__isNative' in param)) && name !== 'onHandlerStateChange' && name !== 'onGestureEvent';\n}\nfunction filterConfig(props, validProps) {\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var res = _objectSpread({}, defaults);\n  validProps.forEach(function (key) {\n    var value = props[key];\n    if (isConfigParam(value, key)) {\n      var _value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        _value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof _value !== 'object') {\n          _value = {\n            top: _value,\n            left: _value,\n            bottom: _value,\n            right: _value\n          };\n        }\n      }\n      res[key] = _value;\n    }\n  });\n  return res;\n}\nfunction transformIntoHandlerTags(handlerIDs) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(function (_ref) {\n      var current = _ref.current;\n      return current;\n    }).filter(function (handle) {\n      return handle;\n    });\n  }\n  return handlerIDs.map(function (handlerID) {\n    var _handlerID$current;\n    return handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;\n  }).filter(function (handlerTag) {\n    return handlerTag > 0;\n  });\n}\nfunction hasUnresolvedRefs(props) {\n  var extract = function extract(refs) {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(function (r) {\n      return r && r.current === null;\n    });\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\nvar stateToPropMappings = (_stateToPropMappings = {}, _defineProperty2(_stateToPropMappings, State.UNDETERMINED, undefined), _defineProperty2(_stateToPropMappings, State.BEGAN, 'onBegan'), _defineProperty2(_stateToPropMappings, State.FAILED, 'onFailed'), _defineProperty2(_stateToPropMappings, State.CANCELLED, 'onCancelled'), _defineProperty2(_stateToPropMappings, State.ACTIVE, 'onActivated'), _defineProperty2(_stateToPropMappings, State.END, 'onEnded'), _stateToPropMappings);\nexport default function createHandler(_ref2) {\n  var name = _ref2.name,\n    _ref2$allowedProps = _ref2.allowedProps,\n    allowedProps = _ref2$allowedProps === void 0 ? [] : _ref2$allowedProps,\n    _ref2$config = _ref2.config,\n    config = _ref2$config === void 0 ? {} : _ref2$config,\n    transformProps = _ref2.transformProps,\n    _ref2$customNativePro = _ref2.customNativeProps,\n    customNativeProps = _ref2$customNativePro === void 0 ? [] : _ref2$customNativePro;\n  var Handler = function (_React$Component) {\n    _inherits(Handler, _React$Component);\n    var _super = _createSuper(Handler);\n    function Handler(props) {\n      var _this;\n      _classCallCheck(this, Handler);\n      _this = _super.call(this, props);\n      _defineProperty(_assertThisInitialized(_this), \"handlerTag\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"config\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"propsRef\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"viewNode\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"viewTag\", void 0);\n      _defineProperty(_assertThisInitialized(_this), \"updateEnqueued\", null);\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerEvent\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onGesture, _this$props;\n          (_this$props$onGesture = (_this$props = _this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n        } else {\n          var _this$props$onGesture2, _this$props2;\n          (_this$props$onGesture2 = (_this$props2 = _this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"onGestureHandlerStateChange\", function (event) {\n        if (event.nativeEvent.handlerTag === _this.handlerTag) {\n          var _this$props$onHandler, _this$props3;\n          (_this$props$onHandler = (_this$props3 = _this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n          var state = event.nativeEvent.state;\n          var stateEventName = stateToPropMappings[state];\n          var eventHandler = stateEventName && _this.props[stateEventName];\n          if (eventHandler && typeof eventHandler === 'function') {\n            eventHandler(event);\n          }\n        } else {\n          var _this$props$onGesture3, _this$props4;\n          (_this$props$onGesture3 = (_this$props4 = _this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"refHandler\", function (node) {\n        _this.viewNode = node;\n        var child = React.Children.only(_this.props.children);\n        var ref = child.ref;\n        if (ref !== null) {\n          if (typeof ref === 'function') {\n            ref(node);\n          } else {\n            ref.current = node;\n          }\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"createGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.createGestureHandler(name, _this.handlerTag, newConfig);\n      });\n      _defineProperty(_assertThisInitialized(_this), \"attachGestureHandler\", function (newViewTag) {\n        _this.viewTag = newViewTag;\n        if (Platform.OS === 'web') {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag, _this.propsRef);\n        } else {\n          RNGestureHandlerModule.attachGestureHandler(_this.handlerTag, newViewTag);\n        }\n      });\n      _defineProperty(_assertThisInitialized(_this), \"updateGestureHandler\", function (newConfig) {\n        _this.config = newConfig;\n        RNGestureHandlerModule.updateGestureHandler(_this.handlerTag, newConfig);\n      });\n      _this.handlerTag = handlerTag++;\n      _this.config = {};\n      _this.propsRef = React.createRef();\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(\"Handler with ID \\\"\".concat(props.id, \"\\\" already registered\"));\n        }\n        handlerIDToTag[props.id] = _this.handlerTag;\n      }\n      return _this;\n    }\n    _createClass(Handler, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        var props = this.props;\n        if (hasUnresolvedRefs(props)) {\n          this.updateEnqueued = setImmediate(function () {\n            _this2.updateEnqueued = null;\n            _this2.update();\n          });\n        }\n        this.createGestureHandler(filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config));\n        this.attachGestureHandler(findNodeHandle(this.viewNode));\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate() {\n        var viewTag = findNodeHandle(this.viewNode);\n        if (this.viewTag !== viewTag) {\n          this.attachGestureHandler(viewTag);\n        }\n        this.update();\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n        if (this.updateEnqueued) {\n          clearImmediate(this.updateEnqueued);\n        }\n        var handlerID = this.props.id;\n        if (handlerID) {\n          delete handlerIDToTag[handlerID];\n        }\n      }\n    }, {\n      key: \"update\",\n      value: function update() {\n        var newConfig = filterConfig(transformProps ? transformProps(this.props) : this.props, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }, {\n      key: \"setNativeProps\",\n      value: function setNativeProps(updates) {\n        var mergedProps = _objectSpread(_objectSpread({}, this.props), updates);\n        var newConfig = filterConfig(transformProps ? transformProps(mergedProps) : mergedProps, [].concat(_toConsumableArray(allowedProps), _toConsumableArray(customNativeProps)), config);\n        this.updateGestureHandler(newConfig);\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var gestureEventHandler = this.onGestureHandlerEvent;\n        var _this$props5 = this.props,\n          onGestureEvent = _this$props5.onGestureEvent,\n          onGestureHandlerEvent = _this$props5.onGestureHandlerEvent;\n        if (onGestureEvent && typeof onGestureEvent !== 'function') {\n          if (onGestureHandlerEvent) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureEventHandler = onGestureEvent;\n        } else {\n          if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var gestureStateEventHandler = this.onGestureHandlerStateChange;\n        var _this$props6 = this.props,\n          onHandlerStateChange = _this$props6.onHandlerStateChange,\n          onGestureHandlerStateChange = _this$props6.onGestureHandlerStateChange;\n        if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n          if (onGestureHandlerStateChange) {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n          gestureStateEventHandler = onHandlerStateChange;\n        } else {\n          if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== 'function') {\n            throw new Error('Nesting touch handlers with native animated driver is not supported yet');\n          }\n        }\n        var events = {\n          onGestureHandlerEvent: gestureEventHandler,\n          onGestureHandlerStateChange: gestureStateEventHandler\n        };\n        this.propsRef.current = events;\n        var child = React.Children.only(this.props.children);\n        var grandChildren = child.props.children;\n        if (Touchable.TOUCH_TARGET_DEBUG && child.type && (child.type === 'RNGestureHandlerButton' || child.type.name === 'View' || child.type.displayName === 'View')) {\n          grandChildren = React.Children.toArray(grandChildren);\n          grandChildren.push(Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop\n          }));\n        }\n        return React.cloneElement(child, _objectSpread({\n          ref: this.refHandler,\n          collapsable: false\n        }, events), grandChildren);\n      }\n    }]);\n    return Handler;\n  }(React.Component);\n  _defineProperty(Handler, \"displayName\", name);\n  return Handler;\n}","map":{"version":3,"names":["React","findNodeHandleRN","NativeModules","Platform","Touchable","deepEqual","RNGestureHandlerModule","State","findNodeHandle","node","OS","_NativeModules$UIMana","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","_objectSpread","UIManagerConstants","_UIManager$getViewMan","_UIManager$getViewMan2","getViewManagerConfig","call","_UIManager$getConstan","getConstants","_UIManager$setJSRespo","setJSResponder","oldSetJSResponder","_UIManager$clearJSRes","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","handlerTag","handlerIDToTag","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","arguments","length","res","forEach","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","Array","isArray","map","_ref","current","filter","handle","handlerID","_handlerID$current","hasUnresolvedRefs","extract","refs","some","r","stateToPropMappings","_stateToPropMappings","_defineProperty2","UNDETERMINED","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","_ref2","_ref2$allowedProps","allowedProps","_ref2$config","config","transformProps","_ref2$customNativePro","customNativeProps","Handler","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_defineProperty","_assertThisInitialized","event","nativeEvent","_this$props$onGesture","_this$props","onGestureEvent","_this$props$onGesture2","_this$props2","_this$props$onHandler","_this$props3","onHandlerStateChange","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","propsRef","updateGestureHandler","createRef","id","Error","concat","_createClass","componentDidMount","_this2","updateEnqueued","setImmediate","update","_toConsumableArray","componentDidUpdate","componentWillUnmount","dropGestureHandler","clearImmediate","setNativeProps","updates","mergedProps","render","gestureEventHandler","_this$props5","gestureStateEventHandler","_this$props6","events","grandChildren","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable","Component"],"sources":["C:\\applicationJS\\react-apps\\ReactNativeMobileApp\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\createHandler.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  findNodeHandle as findNodeHandleRN,\n  NativeModules,\n  Platform,\n  Touchable,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlers';\nimport { ValueOf } from '../typeUtils';\n\nfunction findNodeHandle(\n  node: null | number | React.Component<any, any> | React.ComponentClass<any>\n): null | number | React.Component<any, any> | React.ComponentClass<any> {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nconst { UIManager = {} } = NativeModules;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManager.genericDirectEventTypes = {\n  ...UIManager.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManager.getViewManagerConfig?.('getConstants') ??\n  UIManager.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManager;\nUIManager.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet handlerTag = 1;\nconst handlerIDToTag: Record<string, number> = {};\n\nfunction isConfigParam(param: unknown, name: string) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) ||\n      !('__isNative' in (param as Record<string, unknown>))) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nfunction filterConfig(\n  props: Record<string, unknown>,\n  validProps: string[],\n  defaults: Record<string, unknown> = {}\n) {\n  const res = { ...defaults };\n  validProps.forEach((key) => {\n    const value = props[key];\n    if (isConfigParam(value, key)) {\n      let value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof value !== 'object') {\n          value = { top: value, left: value, bottom: value, right: value };\n        }\n      }\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs: any) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs\n      .map(({ current }: { current: any }) => current)\n      .filter((handle: any) => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      (handlerID: any) =>\n        handlerIDToTag[handlerID] || handlerID.current?.handlerTag || -1\n    )\n    .filter((handlerTag: number) => handlerTag > 0);\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  class Handler extends React.Component<T & InternalEventHandlers> {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = handlerTag++;\n      this.config = {};\n      this.propsRef = React.createRef();\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so _update function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onGestureEvent?.(event);\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        this.props.onHandlerStateChange?.(event);\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          this.propsRef\n        );\n      } else {\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: gestureEventHandler,\n        onGestureHandlerStateChange: gestureStateEventHandler,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAAC,gBAAA;AAAA,OAAAC,aAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,SAAA;AAQA,OAAOC,SAAP,MAAsB,mBAAtB;AACA,OAAOC,sBAAP;AAEA,SAASC,KAAT;AASA,SAASC,cAATA,CACEC,IADF,EAEyE;EACvE,IAAIN,QAAQ,CAACO,EAAT,KAAgB,KAApB,EAA2B,OAAOD,IAAP;EAC3B,OAAOR,gBAAgB,CAACQ,IAAD,CAAvB;AACD;AAED,IAAAE,qBAAA,GAA2BT,aAA3B,CAAQU,SAAS;EAATA,SAAS,GAAAD,qBAAA,cAAG,KAAAA,qBAAA;AAEpB,IAAME,oBAAoB,GAAG;EAC3BC,qBAAqB,EAAE;IAAEC,gBAAgB,EAAE;EAApB,CADI;EAE3BC,2BAA2B,EAAE;IAC3BD,gBAAgB,EAAE;EADS;AAFF,CAA7B;AAWAH,SAAS,CAACK,uBAAV,GAAAC,aAAA,CAAAA,aAAA,KACKN,SAAS,CAACK,uBADqB,GAE/BJ,oBAAA,CAFL;AAOA,IAAMM,kBAAkB,IAAAC,qBAAA,IAAAC,sBAAA,GACtBT,SAAS,CAACU,oBADY,cAAAD,sBAAA,uBACtBA,sBAAA,CAAAE,IAAA,CAAAX,SAAS,EAAwB,cAAxB,CADa,cAAAQ,qBAAA,cAAAA,qBAAA,IAAAI,qBAAA,GAEtBZ,SAAS,CAACa,YAFY,cAAAD,qBAAA,uBAEtBA,qBAAA,CAAAD,IAAA,CAAAX,SAAS,CAFX;AAIA,IAAIO,kBAAJ,EAAwB;EACtBA,kBAAkB,CAACF,uBAAnB,GAAAC,aAAA,CAAAA,aAAA,KACKC,kBAAkB,CAACF,uBADqB,GAExCJ,oBAAA,CAFL;AAID;AAGD,IAAAa,qBAAA,GAOId,SAPJ,CACEe,cAAc;EAAEC,iBAAiB,GAAAF,qBAAA,cAAG,YAAM,CAEzC,CAHG,GAAAA,qBAAA;EAAAG,qBAAA,GAOFjB,SAPJ,CAIEkB,gBAAgB;EAAEC,mBAAmB,GAAAF,qBAAA,cAAG,YAAM,CAE7C,IAAAA,qBAAA;AAEHjB,SAAS,CAACe,cAAV,GAA2B,UAACK,GAAD,EAAcC,oBAAd,EAAgD;EACzE3B,sBAAsB,CAAC4B,oBAAvB,CAA4CF,GAA5C,EAAiDC,oBAAjD;EACAL,iBAAiB,CAACI,GAAD,EAAMC,oBAAN,CAAjB;AACD,CAHD;AAIArB,SAAS,CAACkB,gBAAV,GAA6B,YAAM;EACjCxB,sBAAsB,CAAC6B,sBAAvB;EACAJ,mBAAmB;AACpB,CAHD;AAKA,IAAIK,UAAU,GAAG,CAAjB;AACA,IAAMC,cAAsC,GAAG,EAA/C;AAEA,SAASC,aAATA,CAAuBC,KAAvB,EAAuCC,IAAvC,EAAqD;EAGnD,OACED,KAAK,KAAKE,SAAV,KACCF,KAAK,KAAKG,MAAM,CAACH,KAAD,CAAhB,IACC,EAAE,gBAAiBA,KAAnB,CAFF,KAGAC,IAAI,KAAK,sBAHT,IAIAA,IAAI,KAAK,gBALX;AAOD;AAED,SAASG,YAATA,CACEC,KADF,EAEEC,UAFF,EAIE;EAAA,IADAC,QAAiC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAN,SAAA,GAAAM,SAAA,MAAG,EAHtC;EAKE,IAAME,GAAG,GAAA/B,aAAA,KAAQ4B,QAAA,CAAjB;EACAD,UAAU,CAACK,OAAX,CAAoB,UAAAC,GAAD,EAAS;IAC1B,IAAMC,KAAK,GAAGR,KAAK,CAACO,GAAD,CAAnB;IACA,IAAIb,aAAa,CAACc,KAAD,EAAQD,GAAR,CAAjB,EAA+B;MAC7B,IAAIC,MAAK,GAAGR,KAAK,CAACO,GAAD,CAAjB;MACA,IAAIA,GAAG,KAAK,sBAAR,IAAkCA,GAAG,KAAK,SAA9C,EAAyD;QACvDC,MAAK,GAAGC,wBAAwB,CAACT,KAAK,CAACO,GAAD,CAAN,CAAhC;MACD,CAFD,MAEO,IAAIA,GAAG,KAAK,SAAZ,EAAuB;QAC5B,IAAI,OAAOC,MAAP,KAAiB,QAArB,EAA+B;UAC7BA,MAAK,GAAG;YAAEE,GAAG,EAAEF,MAAP;YAAcG,IAAI,EAAEH,MAApB;YAA2BI,MAAM,EAAEJ,MAAnC;YAA0CK,KAAK,EAAEL;UAAjD,CAAR;QACD;MACF;MACDH,GAAG,CAACE,GAAD,CAAH,GAAWC,MAAX;IACD;EACF,CAbD;EAcA,OAAOH,GAAP;AACD;AAED,SAASI,wBAATA,CAAkCK,UAAlC,EAAmD;EACjD,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAL,EAAgC;IAC9BA,UAAU,GAAG,CAACA,UAAD,CAAb;EACD;EAED,IAAIvD,QAAQ,CAACO,EAAT,KAAgB,KAApB,EAA2B;IACzB,OAAOgD,UAAU,CACdG,GADI,CACA,UAAAC,IAAA;MAAA,IAAGC,OAAA,GAAAD,IAAA,CAAAC,OAAA;MAAA,OAAgCA,OADnC;IAAA,GAEJC,MAFI,CAEI,UAAAC,MAAD;MAAA,OAAiBA,MAFpB;IAAA,EAAP;EAGD;EAED,OAAOP,UAAU,CACdG,GADI,CAEF,UAAAK,SAAD;IAAA,IAAAC,kBAAA;IAAA,OACE9B,cAAc,CAAC6B,SAAD,CAAd,MAAAC,kBAAA,GAA6BD,SAAS,CAACH,OAAvC,cAAAI,kBAAA,uBAA6BA,kBAAA,CAAmB/B,UAAhD,KAA8D,CAAC,CADjE;EAAA,CAFG,EAKJ4B,MALI,CAKI,UAAA5B,UAAD;IAAA,OAAwBA,UAAU,GAAG,CALxC;EAAA,EAAP;AAMD;AAKD,SAASgC,iBAATA,CACExB,KADF,EAEE;EAEA,IAAMyB,OAAO,GAAI,SAAXA,OAAOA,CAAIC,IAAD,EAAuB;IACrC,IAAI,CAACX,KAAK,CAACC,OAAN,CAAcU,IAAd,CAAL,EAA0B;MACxB,OAAOA,IAAI,IAAIA,IAAI,CAACP,OAAL,KAAiB,IAAhC;IACD;IACD,OAAOO,IAAI,CAACC,IAAL,CAAW,UAAAC,CAAD;MAAA,OAAOA,CAAC,IAAIA,CAAC,CAACT,OAAF,KAAc,IAApC;IAAA,EAAP;EACD,CALD;EAMA,OAAOM,OAAO,CAACzB,KAAK,CAAC,sBAAD,CAAN,CAAP,IAA0CyB,OAAO,CAACzB,KAAK,CAAC,SAAD,CAAN,CAAxD;AACD;AAED,IAAM6B,mBAAmB,IAAAC,oBAAA,OAAAC,gBAAA,CAAAD,oBAAA,EACtBnE,KAAK,CAACqE,YAAP,EAAsBnC,SADI,GAAAkC,gBAAA,CAAAD,oBAAA,EAEzBnE,KAAK,CAACsE,KAAP,EAAe,SAFW,GAAAF,gBAAA,CAAAD,oBAAA,EAGzBnE,KAAK,CAACuE,MAAP,EAAgB,UAHU,GAAAH,gBAAA,CAAAD,oBAAA,EAIzBnE,KAAK,CAACwE,SAAP,EAAmB,aAJO,GAAAJ,gBAAA,CAAAD,oBAAA,EAKzBnE,KAAK,CAACyE,MAAP,EAAgB,aALU,GAAAL,gBAAA,CAAAD,oBAAA,EAMzBnE,KAAK,CAAC0E,GAAP,EAAa,YAAAP,oBAAA,CANf;AA0BA,eAAe,SAASQ,aAATA,CAAAC,KAAA,EAS6D;EAAA,IAL1E3C,IADA,GAAA2C,KAAA,CACA3C,IADA;IAAA4C,kBAAA,GAAAD,KAAA,CAEAE,YAAY;IAAZA,YAAY,GAAAD,kBAAA,cAAG,EAFf,GAAAA,kBAAA;IAAAE,YAAA,GAAAH,KAAA,CAGAI,MAAM;IAANA,MAAM,GAAAD,YAAA,cAAG,EAHT,GAAAA,YAAA;IAIAE,cAJA,GAAAL,KAAA,CAIAK,cAJA;IAAAC,qBAAA,GAAAN,KAAA,CAKAO,iBAAiB;IAAjBA,iBAAiB,GAAAD,qBAAA,cAAG,KAAAA,qBAAA;EAAA,IAEdE,OAAN,aAAAC,gBAAA;IAAAC,SAAA,CAAAF,OAAA,EAAAC,gBAAA;IAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,OAAA;IAUE,SAAAA,QAAY/C,KAAD,EAAmC;MAAA,IAAAoD,KAAA;MAAAC,eAAA,OAAAN,OAAA;MAC5CK,KAAA,GAAAF,MAAA,CAAAvE,IAAA,OAAMqB,KAAN;MAD4CsD,eAAA,CAAAC,sBAAA,CAAAH,KAAA;MAAAE,eAAA,CAAAC,sBAAA,CAAAH,KAAA;MAAAE,eAAA,CAAAC,sBAAA,CAAAH,KAAA;MAAAE,eAAA,CAAAC,sBAAA,CAAAH,KAAA;MAAAE,eAAA,CAAAC,sBAAA,CAAAH,KAAA;MAAAE,eAAA,CAAAC,sBAAA,CAAAH,KAAA,qBAFmB,IAEnB;MAAAE,eAAA,CAAAC,sBAAA,CAAAH,KAAA,4BA4Db,UAAAI,KAAD,EAA4B;QAC1D,IAAIA,KAAK,CAACC,WAAN,CAAkBjE,UAAlB,KAAiC4D,KAAA,CAAK5D,UAA1C,EAAsD;UAAA,IAAAkE,qBAAA,EAAAC,WAAA;UACpD,CAAAD,qBAAA,IAAAC,WAAA,GAAAP,KAAA,CAAKpD,KAAL,EAAW4D,cAAX,cAAAF,qBAAA,uBAAAA,qBAAA,CAAA/E,IAAA,CAAAgF,WAAA,EAA4BH,KAA5B;QACD,CAFD,MAEO;UAAA,IAAAK,sBAAA,EAAAC,YAAA;UACL,CAAAD,sBAAA,IAAAC,YAAA,GAAAV,KAAA,CAAKpD,KAAL,EAAW9B,qBAAX,cAAA2F,sBAAA,uBAAAA,sBAAA,CAAAlF,IAAA,CAAAmF,YAAA,EAAmCN,KAAnC;QACD;MACF,CAlE6C;MAAAF,eAAA,CAAAC,sBAAA,CAAAH,KAAA,kCAsE5C,UAAAI,KADoC,EAEjC;QACH,IAAIA,KAAK,CAACC,WAAN,CAAkBjE,UAAlB,KAAiC4D,KAAA,CAAK5D,UAA1C,EAAsD;UAAA,IAAAuE,qBAAA,EAAAC,YAAA;UACpD,CAAAD,qBAAA,IAAAC,YAAA,GAAAZ,KAAA,CAAKpD,KAAL,EAAWiE,oBAAX,cAAAF,qBAAA,uBAAAA,qBAAA,CAAApF,IAAA,CAAAqF,YAAA,EAAkCR,KAAlC;UAEA,IAAMU,KAA4B,GAAGV,KAAK,CAACC,WAAN,CAAkBS,KAAvD;UACA,IAAMC,cAAc,GAAGtC,mBAAmB,CAACqC,KAAD,CAA1C;UACA,IAAME,YAAY,GAAGD,cAAc,IAAIf,KAAA,CAAKpD,KAAL,CAAWmE,cAAX,CAAvC;UACA,IAAIC,YAAY,IAAI,OAAOA,YAAP,KAAwB,UAA5C,EAAwD;YACtDA,YAAY,CAACZ,KAAD,CAAZ;UACD;QACF,CATD,MASO;UAAA,IAAAa,sBAAA,EAAAC,YAAA;UACL,CAAAD,sBAAA,IAAAC,YAAA,GAAAlB,KAAA,CAAKpD,KAAL,EAAW5B,2BAAX,cAAAiG,sBAAA,uBAAAA,sBAAA,CAAA1F,IAAA,CAAA2F,YAAA,EAAyCd,KAAzC;QACD;MACF,CApF6C;MAAAF,eAAA,CAAAC,sBAAA,CAAAH,KAAA,iBAsFxB,UAAAvF,IAAD,EAAe;QAClCuF,KAAA,CAAKmB,QAAL,GAAgB1G,IAAhB;QAEA,IAAM2G,KAAK,GAAGpH,KAAK,CAACqH,QAAN,CAAeC,IAAf,CAAoBtB,KAAA,CAAKpD,KAAL,CAAW2E,QAA/B,CAAd;QAEA,IAAQC,GAAA,GAAaJ,KAArB,CAAQI,GAAA;QACR,IAAIA,GAAG,KAAK,IAAZ,EAAkB;UAChB,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;YAC7BA,GAAG,CAAC/G,IAAD,CAAH;UACD,CAFD,MAEO;YACL+G,GAAG,CAACzD,OAAJ,GAActD,IAAd;UACD;QACF;MACF,CAnG6C;MAAAyF,eAAA,CAAAC,sBAAA,CAAAH,KAAA,2BAsG5C,UAAAyB,SAD6B,EAE1B;QACHzB,KAAA,CAAKT,MAAL,GAAckC,SAAd;QAEAnH,sBAAsB,CAACoH,oBAAvB,CACElF,IADF,EAEEwD,KAAA,CAAK5D,UAFP,EAGEqF,SAHF;MAKD,CA/G6C;MAAAvB,eAAA,CAAAC,sBAAA,CAAAH,KAAA,2BAiHd,UAAA2B,UAAD,EAAwB;QACrD3B,KAAA,CAAK4B,OAAL,GAAeD,UAAf;QAEA,IAAIxH,QAAQ,CAACO,EAAT,KAAgB,KAApB,EAA2B;UAExBJ,sBAAsB,CAACuH,oBAAxB,CACE7B,KAAA,CAAK5D,UADP,EAEEuF,UAFF,EAGE3B,KAAA,CAAK8B,QAHP;QAKD,CAPD,MAOO;UACLxH,sBAAsB,CAACuH,oBAAvB,CACE7B,KAAA,CAAK5D,UADP,EAEEuF,UAFF;QAID;MACF,CAjI6C;MAAAzB,eAAA,CAAAC,sBAAA,CAAAH,KAAA,2BAoI5C,UAAAyB,SAD6B,EAE1B;QACHzB,KAAA,CAAKT,MAAL,GAAckC,SAAd;QAEAnH,sBAAsB,CAACyH,oBAAvB,CAA4C/B,KAAA,CAAK5D,UAAjD,EAA6DqF,SAA7D;MACD,CAzI6C;MAE5CzB,KAAA,CAAK5D,UAAL,GAAkBA,UAAU,EAA5B;MACA4D,KAAA,CAAKT,MAAL,GAAc,EAAd;MACAS,KAAA,CAAK8B,QAAL,GAAgB9H,KAAK,CAACgI,SAAN,EAAhB;MACA,IAAIpF,KAAK,CAACqF,EAAV,EAAc;QACZ,IAAI5F,cAAc,CAACO,KAAK,CAACqF,EAAP,CAAd,KAA6BxF,SAAjC,EAA4C;UAC1C,MAAM,IAAIyF,KAAJ,sBAAAC,MAAA,CAA8BvF,KAAK,CAACqF,EAApC,2BAAN;QACD;QACD5F,cAAc,CAACO,KAAK,CAACqF,EAAP,CAAd,GAA2BjC,KAAA,CAAK5D,UAAhC;MACD;MAAA,OAAA4D,KAAA;IACF;IAAAoC,YAAA,CAAAzC,OAAA;MAAAxC,GAAA;MAAAC,KAAA,EAED,SAAAiF,kBAAA,EAAoB;QAAA,IAAAC,MAAA;QAClB,IAAM1F,KAAsB,GAAG,KAAKA,KAApC;QACA,IAAIwB,iBAAiB,CAACxB,KAAD,CAArB,EAA8B;UAO5B,KAAK2F,cAAL,GAAsBC,YAAY,CAAC,YAAM;YACvCF,MAAA,CAAKC,cAAL,GAAsB,IAAtB;YACAD,MAAA,CAAKG,MAAL;UACD,CAHiC,CAAlC;QAID;QAED,KAAKf,oBAAL,CACE/E,YAAY,CACV6C,cAAc,GAAGA,cAAc,CAAC,KAAK5C,KAAN,CAAjB,GAAgC,KAAKA,KADzC,KAAAuF,MAAA,CAAAO,kBAAA,CAENrD,YAAJ,GAAAqD,kBAAA,CAAqBhD,iBAArB,IACAH,MAHU,CADd;QAQA,KAAKsC,oBAAL,CAA0BrH,cAAc,CAAC,KAAK2G,QAAN,CAAxC;MACD;IAAA;MAAAhE,GAAA;MAAAC,KAAA,EAED,SAAAuF,mBAAA,EAAqB;QACnB,IAAMf,OAAO,GAAGpH,cAAc,CAAC,KAAK2G,QAAN,CAA9B;QACA,IAAI,KAAKS,OAAL,KAAiBA,OAArB,EAA8B;UAC5B,KAAKC,oBAAL,CAA0BD,OAA1B;QACD;QACD,KAAKa,MAAL;MACD;IAAA;MAAAtF,GAAA;MAAAC,KAAA,EAED,SAAAwF,qBAAA,EAAuB;QACrBtI,sBAAsB,CAACuI,kBAAvB,CAA0C,KAAKzG,UAA/C;QACA,IAAI,KAAKmG,cAAT,EAAyB;UACvBO,cAAc,CAAC,KAAKP,cAAN,CAAd;QACD;QAED,IAAMrE,SAA6B,GAAG,KAAKtB,KAAL,CAAWqF,EAAjD;QACA,IAAI/D,SAAJ,EAAe;UAEb,OAAO7B,cAAc,CAAC6B,SAAD,CAArB;QACD;MACF;IAAA;MAAAf,GAAA;MAAAC,KAAA,EAiFO,SAAAqF,OAAA,EAAS;QACf,IAAMhB,SAAS,GAAG9E,YAAY,CAC5B6C,cAAc,GAAGA,cAAc,CAAC,KAAK5C,KAAN,CAAjB,GAAgC,KAAKA,KADvB,KAAAuF,MAAA,CAAAO,kBAAA,CAExBrD,YAAJ,GAAAqD,kBAAA,CAAqBhD,iBAArB,IACAH,MAH4B,CAA9B;QAKA,IAAI,CAAClF,SAAS,CAAC,KAAKkF,MAAN,EAAckC,SAAd,CAAd,EAAwC;UACtC,KAAKM,oBAAL,CAA0BN,SAA1B;QACD;MACF;IAAA;MAAAtE,GAAA;MAAAC,KAAA,EAED,SAAA2F,eAAeC,OAAD,EAAe;QAC3B,IAAMC,WAAW,GAAA/H,aAAA,CAAAA,aAAA,KAAQ,KAAK0B,KAAV,GAAoBoG,OAAA,CAAxC;QACA,IAAMvB,SAAS,GAAG9E,YAAY,CAC5B6C,cAAc,GAAGA,cAAc,CAACyD,WAAD,CAAjB,GAAiCA,WADnB,KAAAd,MAAA,CAAAO,kBAAA,CAExBrD,YAAJ,GAAAqD,kBAAA,CAAqBhD,iBAArB,IACAH,MAH4B,CAA9B;QAKA,KAAKwC,oBAAL,CAA0BN,SAA1B;MACD;IAAA;MAAAtE,GAAA;MAAAC,KAAA,EAED,SAAA8F,OAAA,EAAS;QACP,IAAIC,mBAAmB,GAAG,KAAKrI,qBAA/B;QAMA,IAAAsI,YAAA,GAG4B,KAAKxG,KAHjC;UACE4D,cADI,GAAA4C,YAAA,CACJ5C,cADI;UAEJ1F,qBAAA,GAAAsI,YAAA,CAAAtI,qBAAA;QAEF,IAAI0F,cAAc,IAAI,OAAOA,cAAP,KAA0B,UAAhD,EAA4D;UAI1D,IAAI1F,qBAAJ,EAA2B;YACzB,MAAM,IAAIoH,KAAJ,CACJ,yEADI,CAAN;UAGD;UACDiB,mBAAmB,GAAG3C,cAAtB;QACD,CAVD,MAUO;UACL,IACE1F,qBAAqB,IACrB,OAAOA,qBAAP,KAAiC,UAFnC,EAGE;YACA,MAAM,IAAIoH,KAAJ,CACJ,yEADI,CAAN;UAGD;QACF;QAED,IAAImB,wBAAwB,GAAG,KAAKrI,2BAApC;QAMA,IAAAsI,YAAA,GAGkC,KAAK1G,KAHvC;UACEiE,oBADI,GAAAyC,YAAA,CACJzC,oBADI;UAEJ7F,2BAAA,GAAAsI,YAAA,CAAAtI,2BAAA;QAEF,IAAI6F,oBAAoB,IAAI,OAAOA,oBAAP,KAAgC,UAA5D,EAAwE;UAItE,IAAI7F,2BAAJ,EAAiC;YAC/B,MAAM,IAAIkH,KAAJ,CACJ,yEADI,CAAN;UAGD;UACDmB,wBAAwB,GAAGxC,oBAA3B;QACD,CAVD,MAUO;UACL,IACE7F,2BAA2B,IAC3B,OAAOA,2BAAP,KAAuC,UAFzC,EAGE;YACA,MAAM,IAAIkH,KAAJ,CACJ,yEADI,CAAN;UAGD;QACF;QACD,IAAMqB,MAAM,GAAG;UACbzI,qBAAqB,EAAEqI,mBADV;UAEbnI,2BAA2B,EAAEqI;QAFhB,CAAf;QAKA,KAAKvB,QAAL,CAAc/D,OAAd,GAAwBwF,MAAxB;QAEA,IAAMnC,KAAU,GAAGpH,KAAK,CAACqH,QAAN,CAAeC,IAAf,CAAoB,KAAK1E,KAAL,CAAW2E,QAA/B,CAAnB;QACA,IAAIiC,aAAa,GAAGpC,KAAK,CAACxE,KAAN,CAAY2E,QAAhC;QACA,IACEnH,SAAS,CAACqJ,kBAAV,IACArC,KAAK,CAACsC,IADN,KAECtC,KAAK,CAACsC,IAAN,KAAe,wBAAf,IACCtC,KAAK,CAACsC,IAAN,CAAWlH,IAAX,KAAoB,MADrB,IAEC4E,KAAK,CAACsC,IAAN,CAAWC,WAAX,KAA2B,MAJ7B,CADF,EAME;UACAH,aAAa,GAAGxJ,KAAK,CAACqH,QAAN,CAAeuC,OAAf,CAAuBJ,aAAvB,CAAhB;UACAA,aAAa,CAACK,IAAd,CACEzJ,SAAS,CAAC0J,eAAV,CAA0B;YACxBC,KAAK,EAAE,mBADiB;YAExBC,OAAO,EAAE5C,KAAK,CAACxE,KAAN,CAAYoH;UAFG,CAA1B,CADF;QAMD;QAED,OAAOhK,KAAK,CAACiK,YAAN,CACL7C,KADK,EAAAlG,aAAA;UAGHsG,GAAG,EAAE,KAAK0C,UADZ;UAEEC,WAAW,EAAE;QAFf,GAGKZ,MAAA,GAELC,aAPK,CAAP;MASD;IAAA;IAAA,OAAA7D,OAAA;EAAA,EA1QmB3F,KAAK,CAACoK,SAA5B;EAD0ElE,eAAA,CACpEP,OADoE,iBAEnDnD,IAFmD;EA6Q1E,OAAOmD,OAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}